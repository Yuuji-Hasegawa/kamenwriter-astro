@use '../settings' as setting;
@use '../tools' as tool;
@use 'sass:map';

*:where(:not(iframe, canvas, img, svg, video, svg *)) {
  all: unset;
  display: revert;
}

*,
*::before,
*::after {
  box-sizing: border-box;
  overflow-wrap: break-word;
}

:root {
  @each $key, $name in setting.$spaceScale {
    $is_target: if(
      $key == 2xs or $key == xs or $key == s or $key == m or $key == l or $key == xl or $key == 2xl,
      true,
      false
    );
    @if $is_target {
      --space-#{$key}: #{setting.f-get-space($key)};
    } @else if $key == auto {
      --space-#{$key}: #{$key};
    }
  }

  --space-clamp: clamp(
    clamp(#{setting.f-get-space(m)}, #{map.get(setting.$breakpoints, overm)}, #{setting.f-get-space(xl)}),
    #{map.get(setting.$breakpoints, overs)},
    clamp(#{setting.f-get-space(xl)}, #{map.get(setting.$breakpoints, overm)}, #{setting.f-get-space(3xl)})
  );
  --reading: #{setting.$readableLength};

  @each $key, $name in setting.$fontScale {
    $is_target: if(
      $key == 2xs or $key == xs or $key == s or $key == m or $key == l or $key == xl or $key == 2xl or $key == 3xl,
      true,
      false
    );
    @if $is_target {
      --fnt-#{$key}: #{setting.f-font-size($key)};
    }
  }

  --accent-tint: #{map.get(setting.$lightAccents, tint)};
  --accent-middle: #{map.get(setting.$lightAccents, middle)};
  --accent-shade: #{map.get(setting.$lightAccents, shade)};

  @include tool.darkmode {
    --accent-tint: #{map.get(setting.$darkAccents, tint)};
    --accent-middle: #{map.get(setting.$darkAccents, middle)};
    --accent-shade: #{map.get(setting.$darkAccents, shade)};
  }
}

body {
  min-height: 100svh;
  font-family: setting.$font-family;
  font-size: var(--fnt-m);
  font-weight: map.get(setting.$fontWeight, t);
  font-feature-settings: 'palt';
  font-optical-sizing: auto;
  line-height: map.get(setting.$lineHeight, m);
  color: map.get(setting.$pickupColor, text-primary);
  background-color: map.get(setting.$pickupColor, bg-primary);

  /* -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; */
  text-size-adjust: 100%;
  scroll-behavior: smooth;
  text-rendering: optimizelegibility;
}

b,
strong {
  font-weight: map.get(setting.$fontWeight, b);
}

small {
  font-size: setting.f-font-size(xs);
}

a,
button {
  cursor: pointer;
  transition: var(--custom-transition, all) var(--custom-duration, 0.3s) var(--custom-timing, ease-in-out)
    var(--custom-delay, 0s);

  & * {
    transition: inherit;
  }
}

img {
  max-width: 100%;
  height: auto;
  vertical-align: top;
}

svg {
  width: auto;
  height: 1em;
}

ol,
ul,
details > summary {
  list-style: none;
}

details summary::-webkit-details-marker {
  display: none;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
