@use 'sass:map';
@use '../settings' as setting;

.c-cnt-wrap {
  max-width: setting.$readableLength;
}

.c-summary,
.c-toc {
  color: map.get(setting.$pickupColor, text-secondary);
  background: map.get(setting.$pickupColor, bg-secondary);
}

.c-toc {
  border-color: transparent;
  transition: all 0.3s ease-in-out;

  --box-border-w: 0;

  &:hover,
  &:focus,
  &:active {
    color: setting.f-mix(map.get(setting.$pickupColor, text-primary), transparent, 0.15);
		background-color: setting.f-mix(map.get(setting.$pickupColor, bg-primary), map.get(setting.$pickupColor, text-primary), 0.15);
  }

  &__summary {
    position: relative;

    .o-icon:last-of-type {
      position: absolute;
      top: 50%;
      right: 1rem;
      transition: all 0.3s ease-in-out;
      transform: translateY(-50%);

      .c-toc[open] & {
        transform: translateY(-50%) rotate(180deg);
      }
    }
  }

  &[aria-hidden='true'] {
    content-visibility: hidden;
    contain: content;
    @supports not (content-visibility: hidden) {
      display: none;
    }
  }
}

.c-entry {
  p,
	ul,
	ol,
	blockquote {
    & + * {
      margin-top: setting.f-get-space(l);
    }
  }

	blockquote {
		padding: setting.f-get-space(m);
		color: map.get(setting.$pickupColor, text-secondary);
  	background: map.get(setting.$pickupColor, bg-secondary);
	}

	code {
		font-weight: map.get(setting.$fontWeight, l);
		color: map.get(setting.$brandColors, middle);

		&::before,
		&::after {
			content: '`';
		}
	}
}

.c-bio-pict {
  flex-basis: 100px;
}

.c-bio-txt {
  flex-grow: 1;
  flex-basis: map.get(setting.$breakpoints, unders);

  & > :not(div.c-content-m) {
    width: min(map.get(setting.$breakpoints, overs), 100%);
    min-width: max-content;
  }
}

.c-media-narrow {
	flex-grow: 1;
	flex-basis: 35%;
}

.c-media-wide {
  flex-grow: 999;
	flex-basis: 0;
	min-width: min(map.get(setting.$breakpoints, underm), 100%);
}
