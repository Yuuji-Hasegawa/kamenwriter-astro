@use 'sass:map';
@use 'sass:color';
@use 'sass:math';
@use 'sass:meta';

@function f-mix($color1, $color2, $weight: 0.5) {
  @if $weight == 0 {
    @return $color1;
  }
  @if $weight == 1 {
    @return $color2;
  }

  $w1: 1 - $weight;
  $w2: $weight;

  $oklab1: f-rgb-to-oklab($color1);
  $oklab2: f-rgb-to-oklab($color2);

  $labmix: (
    'l': map.get($oklab1, 'l') * $w1 + map.get($oklab2, 'l') * $w2,
    'a': map.get($oklab1, 'a') * $w1 + map.get($oklab2, 'a') * $w2,
    'b': map.get($oklab1, 'b') * $w1 + map.get($oklab2, 'b') * $w2,
  );

  $rgb: f-oklab-to-rgb($labmix);
  @return rgba($rgb, color.alpha($color1) * $w1 + color.alpha($color2) * $w2);
}

@function f-degamma($value) {
  @if $value <= 0.04045 {
    @return math.div($value, 12.92);
  }
  @return math.pow(math.div($value + 0.055, 1.055), 2.4);
}

@function f-gamma($value) {
  @if $value <= 0.0031308 {
    @return math.clamp($value * 12.92, 0, 1);
  }
  @return math.clamp(1.055 * math.pow($value, math.div(1, 2.4)) - 0.055, 0, 1);
}

@function f-cbrt($num) {
  $one_third: math.div(1, 3);
  $cbrt: math.pow(math.abs($num), $one_third);
  @if $num < 0 {
    @return -1 * $cbrt;
  } @else {
    @return $cbrt;
  }
}

@function f-degToRad($degrees) {
  @return $degrees * math.div(math.$pi, 180);
}

@function f-unitless($number) {
  @return math.div($number, ($number * 0 + 1));
}

@function f-rgb-to-oklab($color) {
  $red: f-degamma(math.div(color.channel($color, "red", $space: rgb), 255));
  $green: f-degamma(math.div(color.channel($color, "green", $space: rgb), 255));
  $blue: f-degamma(math.div(color.channel($color, "blue", $space: rgb), 255));
  $alpha: color.alpha($color);

  $lms: (
    'l': 0.4122214708 * $red + 0.5363325363 * $green + 0.0514459929 * $blue,
    'm': 0.2119034982 * $red + 0.6806995451 * $green + 0.1073969566 * $blue,
    's': 0.0883024619 * $red + 0.2817188376 * $green + 0.6299787005 * $blue,
  );

  $l: 0.2104542553 * f-cbrt(map.get($lms, 'l')) + 0.793617785 * f-cbrt(map.get($lms, 'm')) - 0.0040720468 *
    f-cbrt(map.get($lms, 's'));
  $a: 1.9779984951 * f-cbrt(map.get($lms, 'l')) - 2.428592205 * f-cbrt(map.get($lms, 'm')) + 0.4505937099 *
    f-cbrt(map.get($lms, 's'));
  $b: 0.0259040371 * f-cbrt(map.get($lms, 'l')) + 0.7827717662 * f-cbrt(map.get($lms, 'm')) - 0.808675766 *
    f-cbrt(map.get($lms, 's'));
  @return ('l': $l, 'a': $a, 'b': $b, alpha: $alpha);
}

@function f-oklab-to-rgb($oklab) {
  @if meta.type-of($oklab) != 'map' {
    @error "Must provide map of \"l\", \"a\", \"b\" values";
  }

  $lms: (
    'l':
      math.pow(
        map.get($oklab, 'l') + 0.39633779217376774 * map.get($oklab, 'a') + 0.2158037580607588 * map.get($oklab, 'b'),
        3
      ),
    'm':
      math.pow(
        map.get($oklab, 'l') - 0.10556134232365633 * map.get($oklab, 'a') - 0.0638541747717059 * map.get($oklab, 'b'),
        3
      ),
    's':
      math.pow(
        map.get($oklab, 'l') - 0.08948418209496574 * map.get($oklab, 'a') - 1.2914855378640917 * map.get($oklab, 'b'),
        3
      ),
  );

  $r: math.max(
    4.0767416621 * map.get($lms, 'l') - 3.3077115913 * map.get($lms, 'm') + 0.2309699292 * map.get($lms, 's'),
    0
  );
  $g: math.max(
    -1.2684380046 * map.get($lms, 'l') + 2.6097574011 * map.get($lms, 'm') - 0.3413193965 * map.get($lms, 's'),
    0
  );
  $b: math.max(
    -0.0041960863 * map.get($lms, 'l') - 0.7034186147 * map.get($lms, 'm') + 1.707614701 * map.get($lms, 's'),
    0
  );

  $alpha: 1;
  @if map.has-key($oklab, 'alpha') {
    $alpha: map.get($oklab, 'alpha');
  }

  @return rgba(f-gamma($r) * 255, f-gamma($g) * 255, f-gamma($b) * 255, $alpha);
}

@function f-rgb-to-oklch($color) {
  $oklab: f-rgb-to-oklab($color);
  $l: map.get($oklab, 'l');
  $a: map.get($oklab, 'a');
  $b: map.get($oklab, 'b');
  $alpha: 1;
  @if (map.has-key($oklab, 'alpha')) {
    $alpha: map.get($oklab, 'alpha');
  }

  $h: 0;

  $const: 0.0002;

  @if (math.abs($a) >= $const or math.abs($b) >= $const) {
    $h: f-unitless(math.atan2($b, $a));
  }
  @while ($h < 0) {
    $h: $h + 360;
  }
  @while ($h >= 360) {
    $h: $h - 360;
  }
  @return (l: $l, c: math.sqrt(math.pow($a, 2) + math.pow($b, 2)), h: $h, alpha: $alpha);
}

@function f-oklch-to-rgb($oklch) {
  @if meta.type-of($oklch) != 'map' {
    @error "Must provide map of \"l\", \"c\", \"h\" values";
  }

  $l: map.get($oklch, 'l');
  $c: map.get($oklch, 'c');
  $h: map.get($oklch, 'h');
  $alpha: 1;
  @if (map.has-key($oklch, 'alpha')) {
    $alpha: map.get($oklch, 'alpha');
  }

  $const: 0.0002;

  @if ($l < $const) {
    @return rgba(0, 0, 0, $alpha);
  }

  @while ($h < 0) {
    $h: $h + 360;
  }
  @while ($h >= 360) {
    $h: $h - 360;
  }

  $a: math.cos(f-degToRad($h)) * $c;
  $b: math.sin(f-degToRad($h)) * $c;

  @return f-oklab-to-rgb(
    (
      l: $l,
      a: $a,
      b: $b,
      alpha: $alpha,
    )
  );
}

@function f-lighten($color, $weight: 0.5) {
  @if $weight >= 0 {
    @return f-mix($color, #fff, $weight);
  } @else {
    @return f-darken($color, -$weight);
  }
}

@function f-darken($color, $weight: 0.5) {
  @if $weight >= 0 {
    @return f-mix($color, #000, $weight);
  } @else {
    @return f-lighten($color, -$weight);
  }
}

@function f-gen-secondary($color) {
  $tmp: f-rgb-to-oklch($color);
  @return f-oklch-to-rgb(
    (
      l: 0.65745,
      c: 0.0385,
      h: map.get($tmp, h),
    )
  );
}

@function f-gen-tert($color) {
  $tmp: f-rgb-to-oklch($color);
  @return f-oklch-to-rgb(
    (
      l: 0.6586,
      c: 0.05775,
      h: map.get($tmp, h) + 60,
    )
  );
}

@function f-gen-black($color) {
  $tmp: f-rgb-to-oklch($color);
  @return f-oklch-to-rgb(
    (
      l: 0.6558,
      c: 0.009625,
      h: map.get($tmp, h),
    )
  );
}

@function f-gen-gray($color) {
  $tmp: f-rgb-to-oklch($color);
  @return f-oklch-to-rgb(
    (
      l: 0.6555,
      c: 0.01925,
      h: map.get($tmp, h),
    )
  );
}

@function f-palette-gen($color) {
  $target: map.get(f-rgb-to-oklab(#ffffff), l);
  $middle: f-lighten(
    $color,
    math.div((0.6 * $target - map.get(f-rgb-to-oklab($color), l)), map.get(f-rgb-to-oklab($color), l))
  );
  @return (
    level0:
      f-lighten(
        $middle,
        math.div((0 * $target - map.get(f-rgb-to-oklab($middle), l)), map.get(f-rgb-to-oklab($middle), l))
      ),
    level10:
      f-lighten(
        $middle,
        math.div((0.1 * $target - map.get(f-rgb-to-oklab($middle), l)), map.get(f-rgb-to-oklab($middle), l))
      ),
    level20:
      f-lighten(
        $middle,
        math.div((0.2 * $target - map.get(f-rgb-to-oklab($middle), l)), map.get(f-rgb-to-oklab($middle), l))
      ),
    level30:
      f-lighten(
        $middle,
        math.div((0.3 * $target - map.get(f-rgb-to-oklab($middle), l)), map.get(f-rgb-to-oklab($middle), l))
      ),
    level40:
      f-lighten(
        $middle,
        math.div((0.4 * $target - map.get(f-rgb-to-oklab($middle), l)), map.get(f-rgb-to-oklab($middle), l))
      ),
    level50:
      f-lighten(
        $middle,
        math.div((0.5 * $target - map.get(f-rgb-to-oklab($middle), l)), map.get(f-rgb-to-oklab($middle), l))
      ),
    level60: $middle,
    level70:
      f-lighten(
        $middle,
        math.div(
          ((0.7 * $target - map.get(f-rgb-to-oklab($middle), l)) + map.get(f-rgb-to-oklab($middle), l) * 0.1),
          map.get(f-rgb-to-oklab($middle), l)
        )
      ),
    level80:
      f-lighten(
        $middle,
        math.div(
          (
            (0.8 * $target - map.get(f-rgb-to-oklab($middle), l)) + map.get(f-rgb-to-oklab($middle), l) *
              math.sqrt(0.03)
          ),
          map.get(f-rgb-to-oklab($middle), l)
        )
      ),
    level90:
      f-lighten(
        $middle,
        math.div(
          ((0.9 * $target - map.get(f-rgb-to-oklab($middle), l)) + map.get(f-rgb-to-oklab($middle), l) * 0.2667),
          map.get(f-rgb-to-oklab($middle), l)
        )
      ),
    level95:
      f-lighten(
        $middle,
        math.div(
          ((0.95 * $target - map.get(f-rgb-to-oklab($middle), l)) + map.get(f-rgb-to-oklab($middle), l) * 0.3),
          map.get(f-rgb-to-oklab($middle), l)
        )
      ),
    level99:
      f-lighten(
        $middle,
        math.div(
          ((0.99 * $target - map.get(f-rgb-to-oklab($middle), l)) + map.get(f-rgb-to-oklab($middle), l) * 0.325),
          map.get(f-rgb-to-oklab($middle), l)
        )
      ),
    level100:
      f-lighten(
        $middle,
        math.div(
          ((1 * $target - map.get(f-rgb-to-oklab($middle), l)) + map.get(f-rgb-to-oklab($middle), l) * math.div(1, 3)),
          map.get(f-rgb-to-oklab($middle), l)
        )
      )
  );
}

$pattern: (
  myBlue: #007aff,
  myIndigo: #5856d6,
  myPurple: #af52de,
  myPink: #ff2d55,
  myRed: #ff3b30,
  myOrange: #ff9500,
  myYellow: #ffcc00,
  myGreen: #28cd41,
  myTeal: #59adc4,
  myCyan: #55bef0,
) !default;

$darkPattern: (
  myBlue: #0a84ff,
  myIndigo: #5e5ce6,
  myPurple: #bf5af2,
  myPink: #ff375f,
  myRed: #ff453a,
  myOrange: #ff9f0a,
  myYellow: #ffd60a,
  myGreen: #30d158,
  myTeal: #40c8e0,
  myCyan: #64d2ff,
) !default;

$colorLabels: (
  myPrimary: map.get($pattern, myBlue),
  myDanger: map.get($pattern, myRed),
  mySuccess: map.get($pattern, myGreen),
  myWarning: map.get($pattern, myYellow),
  myInfo: map.get($pattern, myCyan),
  myVisited: map.get($pattern, myPurple),
) !default;

$myBrand: #2c6c60;
$myAccent: #c82e2e;
$mydarkAccent: #ff5a5a;

$brandColors: (
  tint: f-lighten(f-lighten($myBrand, 0.4), 0.15),
  middle: f-lighten($myBrand, 0.4),
  shade: f-darken(f-lighten($myBrand, 0.4), 0.15),
) !default;

$lightAccents: (
  tint: f-lighten($myAccent, 0.15),
  middle: $myAccent,
  shade: f-darken($myAccent, 0.15),
) !default;

$darkAccents: (
  tint: f-lighten($mydarkAccent, 0.15),
  middle: $mydarkAccent,
  shade: f-darken($mydarkAccent, 0.15),
) !default;

$ref-primary: f-palette-gen($myBrand);
$ref-secondary: f-palette-gen(f-gen-secondary($myBrand));
$ref-tert: f-palette-gen(f-gen-tert($myBrand));
$ref-mono: f-palette-gen(f-gen-black($myBrand));
$ref-gray: f-palette-gen(f-gen-gray($myBrand));
/*
$ref-danger: f-palette-gen(map.get($colorLabels, myDanger));
$ref-success: f-palette-gen(map.get($colorLabels, mySuccess));
$ref-warning: f-palette-gen(map.get($colorLabels, myWarning));
$ref-info: f-palette-gen(map.get($colorLabels, myInfo));
$ref-visited: f-palette-gen(map.get($colorLabels, myVisited));
*/

$sys-light: (
  primary: map.get($ref-primary, level40),
  onPrimary: map.get($ref-primary, level100),
  primaryContainer: map.get($ref-primary, level90),
  onPrimaryContainer: map.get($ref-primary, level10),
  primaryFixed: map.get($ref-primary, level90),
  onPrimaryFixed: map.get($ref-primary, level10),
  primaryFixedDim: map.get($ref-primary, level80),
  onPrimaryFixedVariant: map.get($ref-primary, level30),
  secondary: map.get($ref-secondary, level40),
  onSecondary: map.get($ref-secondary, level100),
  secondaryContainer: map.get($ref-secondary, level90),
  onSecondaryContainer: map.get($ref-secondary, level10),
  secondaryFixed: map.get($ref-secondary, level90),
  onSecondaryFixed: map.get($ref-secondary, level10),
  secondaryFixedDim: map.get($ref-secondary, level80),
  onSecondaryFixedVariant: map.get($ref-secondary, level30),
  tertiary: map.get($ref-tert, level40),
  onTertiary: map.get($ref-tert, level100),
  tertiaryContainer: map.get($ref-tert, level90),
  onTertiaryContainer: map.get($ref-tert, level10),
  tertiaryFixed: map.get($ref-tert, level90),
  onTertiaryFixed: map.get($ref-tert, level10),
  tertiaryFixedDim: map.get($ref-tert, level80),
  onTertiaryFixedVariant: map.get($ref-tert, level30),
  /*error: map.get($ref-danger, level40),
  errorContainer: map.get($ref-danger, level90),
  onError: map.get($ref-danger, level100),
  onErrorContainer: map.get($ref-danger, level10),
  success: map.get($ref-success, level40),
  successContainer: map.get($ref-success, level90),
  onSuccess: map.get($ref-success, level100),
  onSuccessContainer: map.get($ref-success, level10),
  warning: map.get($ref-warning, level40),
  warningContainer: map.get($ref-warning, level90),
  onWarning: map.get($ref-warning, level100),
  onWarningContainer: map.get($ref-warning, level10),
  info: map.get($ref-info, level40),
  infoContainer: map.get($ref-info, level90),
  onInfo: map.get($ref-info, level100),
  onInfoContainer: map.get($ref-info, level10),
  visited: map.get($ref-visited, level40),
  visitedContainer: map.get($ref-visited, level90),
  onVisited: map.get($ref-visited, level100),
  onVisitedContainer: map.get($ref-visited, level10),
	*/
    container: map.get($ref-primary, level99),
  onContainer: map.get($ref-mono, level10),
  outline: map.get($ref-gray, level50),
  inverseOnSurface: map.get($ref-gray, level95),
  inverseSurface: map.get($ref-mono, level20),
  inversePrimary: map.get($ref-primary, level80),
  shadow: map.get($ref-mono, level0),
  surfaceTint: map.get($ref-primary, level40),
  outlineVariant: map.get($ref-mono, level80),
  scrim: map.get($ref-mono, level0),
  surface: map.get($ref-mono, level99),
  onSurface: map.get($ref-mono, level10),
  surfaceVariant: map.get($ref-gray, level90),
  onSurfaceVariant: map.get($ref-gray, level30),
  surfaceContainerHighest: map.get($ref-mono, level90),
  surfaceContainerHigh: map.get($ref-mono, level90),
  surfaceContainer: map.get($ref-mono, level95),
  surfaceContainerLow: map.get($ref-mono, level95),
  surfaceContainerLowest: map.get($ref-mono, level100),
  surfaceDim: map.get($ref-mono, level90),
  surfaceBright: map.get($ref-mono, level99),
) !default;

$sys-dark: (
  primary: map.get($ref-primary, level80),
  onPrimary: map.get($ref-primary, level20),
  primaryContainer: map.get($ref-primary, level30),
  onPrimaryContainer: map.get($ref-primary, level90),
  primaryFixed: map.get($ref-primary, level90),
  onPrimaryFixed: map.get($ref-primary, level10),
  primaryFixedDim: map.get($ref-primary, level80),
  onPrimaryFixedVariant: map.get($ref-primary, level30),
  secondary: map.get($ref-secondary, level80),
  onSecondary: map.get($ref-secondary, level20),
  secondaryContainer: map.get($ref-secondary, level30),
  onSecondaryContainer: map.get($ref-secondary, level90),
  secondaryFixed: map.get($ref-secondary, level90),
  onSecondaryFixed: map.get($ref-secondary, level10),
  secondaryFixedDim: map.get($ref-secondary, level80),
  onSecondaryFixedVariant: map.get($ref-secondary, level30),
  tertiary: map.get($ref-tert, level80),
  onTertiary: map.get($ref-tert, level20),
  tertiaryContainer: map.get($ref-tert, level30),
  onTertiaryContainer: map.get($ref-tert, level90),
  tertiaryFixed: map.get($ref-tert, level90),
  onTertiaryFixed: map.get($ref-tert, level10),
  tertiaryFixedDim: map.get($ref-tert, level80),
  onTertiaryFixedVariant: map.get($ref-tert, level30),
  /*error: map.get($ref-danger, level80),
  errorContainer: map.get($ref-danger, level30),
  onError: map.get($ref-danger, level20),
  onErrorContainer: map.get($ref-danger, level90),
  success: map.get($ref-success, level80),
  successContainer: map.get($ref-success, level30),
  onSuccess: map.get($ref-success, level20),
  onSuccessContainer: map.get($ref-success, level90),
  warning: map.get($ref-warning, level80),
  warningContainer: map.get($ref-warning, level30),
  onWarning: map.get($ref-warning, level20),
  onWarningContainer: map.get($ref-warning, level90),
  info: map.get($ref-info, level80),
  infoContainer: map.get($ref-info, level30),
  onInfo: map.get($ref-info, level20),
  onInfoContainer: map.get($ref-info, level90),
  visited: map.get($ref-visited, level80),
  visitedContainer: map.get($ref-visited, level30),
  onVisited: map.get($ref-visited, level20),
  onVisitedContainer: map.get($ref-visited, level90),
	*/
    container: map.get($ref-mono, level10),
  onContainer: map.get($ref-mono, level90),
  outline: map.get($ref-gray, level60),
  inverseOnSurface: map.get($ref-mono, level10),
  inverseSurface: map.get($ref-mono, level90),
  inversePrimary: map.get($ref-primary, level40),
  shadow: map.get($ref-mono, level0),
  surfaceTint: map.get($ref-primary, level80),
  outlineVariant: map.get($ref-gray, level30),
  scrim: map.get($ref-mono, level0),
  surface: map.get($ref-mono, level10),
  onSurface: map.get($ref-mono, level80),
  surfaceVariant: map.get($ref-gray, level30),
  onSurfaceVariant: map.get($ref-gray, level80),
  surfaceContainerHighest: map.get($ref-mono, level20),
  surfaceContainerHigh: map.get($ref-mono, level20),
  surfaceContainer: map.get($ref-mono, level10),
  surfaceContainerLow: map.get($ref-mono, level10),
  surfaceContainerLowest: map.get($ref-mono, level10),
  surfaceDim: map.get($ref-mono, level10),
  surfaceBright: map.get($ref-mono, level20),
) !default;

/*

$semantic-light: (
  text-body: map.get($sys-light, onContainer),
  text-description: map.get($sys-light, onSurfaceVariant),
  text-placeholder: map.get($sys-light, onSurface),
  text-on-fill: map.get($sys-light, onPrimary),
  text-link: map.get($sys-light, primary),
  text-hover: color.mix(map.get($sys-light, primary), map.get($sys-light, onContainer), 85%),
  text-active: map.get($sys-light, primary),
  text-visited: map.get($sys-light, visited),
  text-alert: map.get($sys-light, error),
  text-disabled: map.get($sys-light, onSurface),
  icon-label: map.get($sys-light, onContainer),
  icon-active: map.get($sys-light, primary),
  icon-alert: map.get($sys-light, error),
  icon-disabled: map.get($sys-light, onSurface),
  button-normal: map.get($sys-light, primary),
  button-hover: color.mix(map.get($sys-light, primary), map.get($sys-light, onContainer), 85%),
  button-active: map.get($sys-light, primary),
  button-disabled: map.get($sys-light, onSurface),
  border-field: map.get($sys-light, onContainer),
  border-divider: map.get($sys-light, surfaceVariant),
  border-focused: map.get($sys-light, warning),
  border-selected: map.get($sys-light, primary),
  border-alert: map.get($sys-light, error),
  border-disabled: map.get($sys-light, surfaceVariant),
  bg-primary: map.get($sys-light, container),
  bg-secondary: map.get($sys-light, surfaceVariant),
  bg-tertiary: map.get($sys-light, surface),
  bg-qua: map.get($sys-light, surfaceContainerLowest),
  status-success: map.get($sys-light, success),
  status-alert: map.get($sys-light, error),
  status-warning: map.get($sys-light, warning),
  brand-tint: map.get($brandColors, lightTint),
  brand-middle: map.get($brandColors, lightMiddle),
  brand-shade: map.get($brandColors, lightShade),
) !default;

*/

$semantic-dark: (
  text-body: map.get($sys-dark, onContainer),
  text-description: map.get($sys-dark, onSurfaceVariant),
  text-placeholder: map.get($sys-dark, onSurface),
  text-on-fill: map.get($sys-dark, onPrimary),
  text-link: map.get($sys-dark, primary),
  text-hover: color.mix(map.get($sys-dark, primary), map.get($sys-light, onContainer), 85%),
  /*
	text-active: map.get($sys-dark, primary),
  text-visited: map.get($sys-dark, visited),
  text-alert: map.get($sys-dark, error),
	*/
    text-disabled: map.get($sys-dark, onSurface),
  /*
	icon-label: map.get($sys-dark, onContainer),
  icon-active: map.get($sys-dark, primary),
  icon-alert: map.get($sys-dark, error),
  icon-disabled: map.get($sys-dark, onSurface),
	*/
    button-normal: map.get($sys-dark, primary),
  button-hover: color.mix(map.get($sys-dark, primary), map.get($sys-light, onContainer), 85%),
  button-active: map.get($sys-dark, primary),
  button-disabled: map.get($sys-dark, onSurface),
  border-field: map.get($sys-dark, onContainer),
  border-divider: map.get($sys-dark, surfaceVariant),
  /*border-focused: map.get($sys-dark, warning),*/ border-selected: map.get($sys-dark, primary),
  /*border-alert: map.get($sys-dark, error),*/ border-disabled: map.get($sys-dark, surfaceVariant),
  bg-primary: map.get($sys-dark, container),
  bg-secondary: map.get($sys-dark, surfaceVariant),
  bg-tertiary: map.get($sys-dark, surface),
  bg-qua: map.get($sys-dark, surfaceContainerLowest),
  /*
  status-success: map.get($sys-dark, success),
  status-alert: map.get($sys-dark, error),
  status-warning: map.get($sys-dark, warning),
  brand-tint: map.get($brandColors, darkTint),
  brand-middle: map.get($brandColors, darkMiddle),
  brand-shade: map.get($brandColors, darkShade),
	*/
) !default;

$pickupColor: (
  text-primary: map.get($semantic-dark, text-body),
  text-secondary: map.get($semantic-dark, text-description),
  text-tertiary: map.get($semantic-dark, text-placeholder),
  text-quaternary: map.get($semantic-dark, text-on-fill),
  colored-primary: map.get($sys-dark, primary),
  colored-secondary: color.mix(map.get($sys-dark, primary), map.get($sys-light, onContainer), 85%),
  bg-primary: map.get($semantic-dark, bg-primary),
  bg-secondary: map.get($semantic-dark, bg-secondary),
  bg-tertiary: map.get($semantic-dark, bg-tertiary),
  bg-quaternary: map.get($semantic-dark, bg-qua),
) !default;
